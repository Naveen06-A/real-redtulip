
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import moment from 'moment';
import logo from '../assets/logo.png';

export const generatePdf = async (
  title: string,
  head: string[][],
  body: (string | number)[][],
  fileName: string,
  outputType: 'datauristring' | 'blob' = 'blob'
): Promise<string | Blob> => {
  try {
    if (!title || typeof title !== 'string') {
      throw new Error('Invalid title: Must be a non-empty string');
    }
    if (!Array.isArray(head) || !head.every(row => Array.isArray(row) && row.every(cell => typeof cell === 'string'))) {
      throw new Error('Invalid headers: Must be an array of arrays of strings');
    }
    if (!Array.isArray(body) || !body.every(row => Array.isArray(row))) {
      throw new Error('Invalid body: Must be an array of arrays');
    }
    if (!fileName || typeof fileName !== 'string') {
      throw new Error('Invalid fileName: Must be a non-empty string');
    }
    if (outputType !== 'datauristring' && outputType !== 'blob') {
      throw new Error(`Invalid output type: Must be 'datauristring' or 'blob', got '${outputType}'`);
    }

    console.debug('Generating PDF with inputs:', {
      title,
      headers: head,
      bodySample: body.slice(0, 2),
      totalRows: body.length,
      fileName,
      outputType,
    });

    const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });

    // Cover Page
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(32);
    doc.setTextColor(31, 56, 100);
    doc.text(title, 105, 50, { align: 'center', lineHeightFactor: 1.5 });

    let logoLoaded = false;
    try {
      const img = new Image();
      img.src = logo;
      await new Promise((resolve, reject) => {
        img.onload = () => resolve(true);
        img.onerror = () => reject(new Error('Failed to load logo image'));
        setTimeout(() => reject(new Error('Logo image loading timed out')), 5000);
      });
      doc.addImage(img, 'PNG', 75, 10, 50, 30);
      logoLoaded = true;
    } catch (error) {
      console.warn('Logo loading failed:', error);
      doc.setFontSize(18);
      doc.setTextColor(100, 100, 100);
      doc.text('Logo not available', 105, 30, { align: 'center', lineHeightFactor: 1.5 });
    }

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(18);
    doc.setTextColor(50, 50, 50);
    doc.text(`Generated on: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`, 105, logoLoaded ? 80 : 70, { align: 'center', lineHeightFactor: 1.5 });
    doc.text('Generated by xAI Property Management', 105, logoLoaded ? 90 : 80, { align: 'center', lineHeightFactor: 1.5 });

    // Table Page
    doc.addPage();

    autoTable(doc, {
      head,
      body: body.map(row => row.map(cell => String(cell || 'N/A'))),
      startY: 20,
      theme: 'grid',
      headStyles: {
        fillColor: [31, 56, 100],
        textColor: [255, 255, 255],
        fontSize: 22,
        font: 'helvetica',
        fontStyle: 'bold',
        halign: 'center',
        lineHeightFactor: 1.6,
      },
      bodyStyles: {
        fontSize: 20,
        font: 'helvetica',
        textColor: [50, 50, 50],
        cellPadding: 8,
        minCellHeight: 15,
        lineHeightFactor: 1.6,
      },
      columnStyles: {
        0: { cellWidth: 80 }, 1: { cellWidth: 90 }, 2: { cellWidth: 50 }, 3: { cellWidth: 25 },
        4: { cellWidth: 50 }, 5: { cellWidth: 30 }, 6: { cellWidth: 30 }, 7: { cellWidth: 30 },
        8: { cellWidth: 30 }, 9: { cellWidth: 30 }, 10: { cellWidth: 30 }, 11: { cellWidth: 50 },
        12: { cellWidth: 30 }, 13: { cellWidth: 30 }, 14: { cellWidth: 25 }, 15: { cellWidth: 25 },
        16: { cellWidth: 25 }, 17: { cellWidth: 25 }, 18: { cellWidth: 25 }, 19: { cellWidth: 30 },
        20: { cellWidth: 30 }, 21: { cellWidth: 25 }, 22: { cellWidth: 25 }, 23: { cellWidth: 30 },
        24: { cellWidth: 60 },
      },
      margin: { top: 20, left: 10, right: 10 },
      styles: { overflow: 'linebreak', font: 'helvetica', cellPadding: 8 },
      didDrawPage: (data) => {
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(12);
        doc.setTextColor(100, 100, 100);
        doc.text(`xAI Property Management - Page ${data.pageNumber}`, 105, doc.internal.pageSize.height - 10, { align: 'center' });
      },
    });

    let result: string | Blob;
    if (outputType === 'datauristring') {
      result = doc.output('datauristring');
      if (typeof result !== 'string' || !result.startsWith('data:application/pdf;base64,')) {
        const blob = doc.output('blob') as Blob;
        result = await new Promise<string>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result as string);
          reader.onerror = () => reject(new Error('Failed to convert blob to data URL'));
          reader.readAsDataURL(blob);
        });
      }
    } else {
      result = doc.output('blob');
    }

    console.debug('PDF generated:', { outputType, type: typeof result, isBlob: result instanceof Blob, dataLength: typeof result === 'string' ? result.length : result instanceof Blob ? result.size : 'N/A' });

    if (outputType === 'datauristring' && (typeof result !== 'string' || !result.startsWith('data:application/pdf;base64,'))) {
      throw new Error('Invalid data URL format from jsPDF');
    }
    if (outputType === 'blob' && !(result instanceof Blob)) {
      throw new Error('Invalid blob format from jsPDF');
    }

    return result;
  } catch (error: any) {
    console.error('Error generating PDF:', { message: error.message, stack: error.stack, title, headersSample: head.slice(0, 2), bodySample: body.slice(0, 2), outputType });
    throw error;
  }
};
